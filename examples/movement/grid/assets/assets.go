// Code generated by go-bindata.
// sources:
// assets/spr_character.png
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsSpr_characterPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xaa\x04\x55\xfb\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x80\x00\x00\x00\x10\x08\x06\x00\x00\x00\xde\x58\x77\x88\x00\x00\x04\x71\x49\x44\x41\x54\x68\x81\xed\x59\x3d\x4f\x1b\x5b\x10\x3d\x8b\x9e\xbb\xd7\x52\x1b\x89\x8e\x44\x42\xda\x58\xa2\x81\x54\x34\x71\x83\x14\xa5\x71\xb1\x2e\x91\xe8\xf9\x19\xee\x2d\xa5\x64\x0b\x52\x20\x24\x9a\xd0\xb8\xc3\x8d\x25\xb4\x52\xa4\x84\x0e\x09\x6a\xda\x57\x3c\xc9\xc5\xbe\x82\x9c\x9b\xd9\xd9\x99\xbb\x77\xf3\xd9\xbc\x69\x16\xaf\xef\x99\x8f\x73\xe6\x7e\xf8\x92\xc1\xb1\x7c\x6f\xbf\xd6\xef\xaa\xd5\x32\xf3\xc6\x6b\x6c\xea\xd8\xff\xed\xf7\x98\xa7\xc9\x5f\xde\x60\x00\x18\x14\x39\xd6\x65\x15\x9e\x5d\xc2\x4a\x5c\x0e\x34\x1a\xa8\x4f\xf3\x58\xef\x7f\x04\xdf\xb7\x19\x7f\x86\x8f\x1f\xf5\xf3\xb3\x79\x90\x9a\x48\x1f\xad\x06\xc8\xf7\xf6\xeb\x41\x91\x37\x80\xf2\x99\x03\x66\x13\x10\xb7\x2e\xab\xc6\xf8\xf0\xbd\x83\xf3\x7c\xf4\xc5\xcb\x82\xbf\x27\xb6\xf6\xf3\xee\xfd\x5b\x5c\xdd\x3c\xe0\xe8\x60\x0b\x17\xc7\x97\xbd\x57\x35\xcd\x23\x80\x30\x89\x80\xb8\x90\x1e\x96\x22\xa6\xf2\x68\x99\xf6\xb1\xa1\x81\x31\xc7\x29\xe3\xa2\x81\x23\xb8\x98\x80\x29\x78\x8e\xd1\xd8\xa3\x83\xad\x24\x2c\x73\xa0\x0f\x8a\x7f\x75\xf3\x10\xfc\xf6\xe1\x67\x50\xe4\x38\x3a\xd8\xea\xcc\xcf\xc3\x5a\xb5\xc9\x31\x7d\xf1\xda\x07\x6d\x23\x65\x50\xd7\xf7\xb1\xa0\xd6\x58\x0f\x6f\xf9\x20\x89\x7c\xc6\xf0\x5c\x7d\x24\x96\x42\xf6\x69\x40\xda\xd5\xcd\x43\xd2\x38\x2b\x17\x19\x5b\x5a\x98\xc9\x4e\x1d\xcc\x5b\x3e\xa5\xc5\x9a\x31\xb5\x41\x25\x3e\x34\x80\x04\x33\xf0\xba\xac\x5a\xc9\x68\x92\xbb\x4c\xe2\xbd\x26\xa9\x56\xcb\x4c\xfa\xe5\xdf\x24\x71\x5d\x56\xb8\xba\x79\xc0\xbb\xf7\x6f\x3b\x0b\x5b\x97\x55\xc0\x53\x40\x4b\x48\x0f\xaf\x73\x90\xcf\xd4\x26\xb7\x62\x33\xaf\x2e\x1f\xdc\x7a\x58\xb3\xc5\xfb\xba\xac\xdc\x2d\x44\xae\x3c\x56\x03\x69\xdb\x00\x9e\xc5\x3f\x3f\xd9\x09\x20\x26\xc0\x02\xf8\x8e\x76\x7e\xb2\xd3\xea\x36\x6b\xf6\xc9\x22\xa4\xcf\x2e\xa3\x90\x12\xb3\x2e\x2b\x5c\x1c\x5f\x26\x61\x63\x24\xc7\x66\x89\xce\xcf\x13\xdf\xf3\xd1\xb5\x35\xa6\x34\xd0\xc5\xf1\x65\x23\x2e\x39\x48\x6d\x3e\x8b\x73\x6b\x15\xa2\xb5\xb6\x00\x3d\x5b\x24\xf1\x9e\x80\xb2\x1b\x19\x50\x76\xbe\x2c\xca\x6a\x1e\x1d\x4f\x12\xc0\xc6\x5c\xcc\xa6\xad\x58\xa9\xd6\xd5\x78\x72\x02\xd0\x28\x98\x25\x5c\x57\x0d\x29\x31\x2d\x63\x6d\xac\xf5\xfc\x64\xa7\xc1\x45\xcc\xa7\xac\x41\x73\xce\x86\x90\xf8\xc6\x21\xb0\x5a\x2d\xb3\xc9\xfc\x0e\xc5\xb0\xc6\xba\xac\x70\xbd\xfb\x12\x4c\x84\xc9\xac\xcb\x0a\x8b\xd9\x14\xc5\xb0\xc6\x64\x7e\x67\x0a\x71\xf6\xf7\xbf\x21\xa0\x0c\x46\x1f\x7c\x5a\xc9\xcb\xcf\x92\x80\xcd\xed\x51\x10\x60\x31\x9b\xba\xc4\xeb\x25\x5b\xbe\x27\x91\x5e\xfc\x98\xbf\xbe\xb6\x98\x4d\x1b\x31\x53\x72\xa4\xe5\x7b\xfb\x35\x73\x1c\x14\x39\x36\xb7\x47\xad\x09\x20\xc7\x7a\xf1\xf5\x78\xae\x0a\xc0\x37\x8d\x68\x61\x05\xa8\x56\xcb\xac\x7c\xcc\x42\x40\xfd\x53\x70\x31\x9b\xe2\xe9\xfe\x16\xe5\x63\x66\x8a\xcf\x26\xd2\x64\xcb\x82\x00\x98\xcd\xc3\xcf\x24\xe6\xe9\xfe\x16\x00\xb0\xb9\x3d\x02\x80\xd0\x90\x87\xa7\x67\x56\xcd\x0d\xbc\x75\x18\xec\x32\x3d\x01\x98\xaf\x25\x20\x27\x40\x5f\xd3\xb9\x79\x2b\x19\x6b\x64\xcd\xe4\x80\x9c\x78\x78\xd6\xc0\xdc\x81\x66\x33\xb0\x29\x35\xff\xe1\x0f\x79\x92\xe6\xcc\x93\xf6\x74\x7f\x8b\xc9\xfc\x2e\x14\xe1\x15\xc0\xa5\x68\x73\x7b\x84\x37\x9f\x3e\x87\x42\x52\xf0\xec\xea\x62\x58\x63\x3c\x7e\xd1\xf8\x8e\xc5\xa5\xde\x05\xd0\xa4\xaf\xc9\xfc\x0e\x8b\xd9\x14\x87\xa7\x67\x0d\x3f\x12\x57\x0c\x6b\x94\x8f\x76\x08\x7e\xe7\xf9\xe0\x7b\x4e\xa2\x8f\x1f\xbf\x98\xbe\x52\x6a\xd0\x5b\x92\xf4\xd5\x75\x0f\x23\xf5\xa3\x06\xe4\x5f\x63\xcd\x9b\xc0\x67\xb2\xdb\x5d\x9e\xf2\x1b\x96\xc9\x8e\xc7\xc0\xf5\xee\x08\x4f\xf7\xb7\x21\x79\x7d\x90\xf2\x88\xf8\xf0\xfa\x15\x3e\xfc\xd3\x5e\x2a\x9f\x09\xf6\x2f\xa2\xe4\xe7\x62\xf8\xfc\xb1\x7c\xcc\x50\xaa\x99\x61\x19\xc5\xf3\xc4\xa7\xaf\x41\x91\xb7\xc4\x97\x36\x28\x72\x4c\xe6\xcc\x3b\x6b\xe4\x21\x73\xf5\x6a\x60\x1e\x72\x95\x19\x14\x39\xf0\xfa\x15\x10\xd9\x3a\x74\xfc\x62\xf8\x05\xe3\xf1\x8b\x86\x06\x40\xd6\x8a\xdd\x5a\x01\x80\x6f\x4b\x9d\x4e\x5c\x9b\x2e\xc2\xba\x0d\xd4\x22\x0e\x8a\x1c\xd7\xbb\x2f\x4d\x12\xbd\xfb\x04\xb9\xa5\x78\xe4\xcb\x6b\x68\x8d\x95\x75\x59\x79\x7b\xb9\x6b\x3f\xb1\xda\xad\x1c\xac\xd3\x7b\x57\x0e\xb2\x4e\x8f\x0b\x8b\xb7\xc5\x6c\x8a\x37\x9f\x3e\x9b\x7c\x6b\x3d\xdc\xab\x60\x99\xb0\xb5\xdc\xe8\x04\x3d\xf3\x9a\xa0\x5a\x2d\xb3\x1c\xa8\xf1\x75\x5b\xb0\xcc\xda\xbf\x8b\x61\x1d\xe2\x79\x33\xaf\x5a\x2d\xb3\x7c\x6f\xbf\xd6\xa4\xa7\xec\xbb\x8d\xdc\x12\x6a\x8a\xe5\x00\x20\xdc\xb9\xf7\x11\x9f\xef\x0f\x4f\x11\xb6\xc1\xb2\xe7\x59\x86\xe2\x5a\x93\xc1\x5b\xfd\x5c\x71\xbb\x96\xd9\xd8\x19\x20\x14\xf0\x75\xbf\xd4\x3e\x63\xcb\xbf\xde\x8f\x01\xb8\x07\x4f\x0b\xab\xf7\xf0\x3e\x3e\x88\xe7\x78\xc0\x16\xf1\x7b\xfc\x30\x97\xbe\xb5\x68\x1f\x31\xde\x24\xbf\x92\x77\xc9\x89\xc6\x9b\x07\xa1\x58\xa0\x14\xfb\x53\xff\xd1\xeb\xfa\x6d\x9e\x22\x5c\x57\x8c\xdf\x91\x87\xe7\xe3\x57\xfc\x27\xf1\x3f\x10\xea\x40\xa0\xce\xfc\xdb\x25\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x4e\x2c\x99\x59\xaa\x04\x00\x00")

func assetsSpr_characterPngBytes() ([]byte, error) {
	return bindataRead(
		_assetsSpr_characterPng,
		"assets/spr_character.png",
	)
}

func assetsSpr_characterPng() (*asset, error) {
	bytes, err := assetsSpr_characterPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/spr_character.png", size: 1194, mode: os.FileMode(493), modTime: time.Unix(1554537008, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/spr_character.png": assetsSpr_characterPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"spr_character.png": &bintree{assetsSpr_characterPng, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

