// Code generated by go-bindata.
// sources:
// 8x8map.png
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __8x8mapPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x69\x54\x53\xd7\xfe\xbd\xd4\x16\xb1\x0a\x82\xe2\x04\x15\x87\x55\xb0\x91\x2a\x14\x41\x2a\x14\xd0\x82\x96\x29\x02\x49\x20\x8b\x21\x50\x4a\xca\x14\x31\x22\x86\x40\x42\x68\x1d\xa1\x0a\xa6\x18\xb0\x12\x04\x04\xda\x84\x29\x01\x4d\x03\x68\x08\xd4\x01\x30\xa2\x44\xa6\x9b\x7f\xd0\x24\x4e\x80\x44\xc9\x15\x43\x92\x92\x18\xf8\x2f\xeb\x7b\x6b\x3d\x93\xbc\xf5\x5e\xbf\xbc\x0f\xe7\xc3\x6f\xad\x7b\xcf\xd9\x67\xff\xf6\xde\xbf\xf3\x53\xf8\xfe\x6f\x2c\x3f\xb6\xfb\x18\x00\x00\xcb\xa0\xc0\x00\x04\x00\x98\x15\xbd\x5d\x16\xe6\x00\x00\x08\x76\x95\x05\x03\x00\xb0\xe4\x50\x60\x74\x16\x00\x2c\x5d\xf9\x76\x99\x01\xf4\x8b\x6b\x01\xc0\xd2\x3a\x28\x60\x0f\x2a\xe7\xe2\xb4\x24\xac\x10\x93\xb2\x6e\xf1\x23\xef\x34\x46\xfd\xf0\xee\x8c\x7e\x14\x0c\x9e\x9c\xfa\xfb\xb5\xb5\x9f\xda\xbe\xf1\x4f\xc3\x2d\xe2\x9c\x3b\xbd\xcd\x22\xea\x79\x0c\x6c\xed\xa6\x90\xa9\xe0\xd3\x64\x98\x6d\x5c\xe1\x99\xcd\xab\x4e\x6c\x1c\x3e\xc9\xab\x45\x1e\xbb\xf4\xe1\x1a\x9b\xaf\xdd\x37\x0d\x17\x0e\x9d\x65\xb5\x81\x31\x82\x5b\xbd\x3d\x1f\xc1\xaa\xa0\x0b\xb2\x72\xf2\x80\xcf\xe4\xc3\xdc\xaa\x71\x51\x56\x77\x2e\x79\xcb\x5d\x2a\x55\x33\xee\x1d\xc2\x6c\xdf\x89\x0f\x4d\xed\x51\x8b\xcb\xee\x8c\xdd\x5c\xde\xf5\xc0\xdf\x71\x9d\x2a\x3b\x84\x2f\x41\xe0\xdb\x83\x55\x0e\xf2\x1a\x2b\x60\x5f\xe0\xb7\x80\xb5\xcd\x5a\x20\xe0\x43\x73\xc0\xe6\xa8\xd9\xee\x80\xff\xb6\x2c\xb9\x49\x59\xd3\x1a\x78\x56\x32\x13\x2f\x73\x74\xaf\x95\x1e\x6c\x68\x8f\x95\x57\xfa\x6d\x59\x06\x6c\xfe\x60\xd1\x8f\x85\x7f\x00\x1b\x37\xbb\x02\x85\x16\x26\xcb\xdb\x43\x53\xac\x7b\xf6\x94\x35\x66\x7f\xb4\x1e\xa8\xc6\x34\x34\xef\x4a\x7c\xef\x10\xec\x11\xe8\x66\x8e\xb6\xe6\x17\xed\xf6\x1a\x50\xd9\xf2\x55\x54\x34\x12\x4f\x1e\x79\xb0\x4d\x95\xdd\x84\x82\xfe\xef\xcb\x44\x23\x40\xeb\x24\xa3\x1b\x7f\xc8\x9b\x20\xc9\x1c\x81\xdf\x9f\x48\x53\x0a\xbc\xeb\xe5\xe9\xd6\x80\x1a\xfe\x2f\x58\x1f\x67\xc7\x39\x8d\x33\xfa\xb5\xcf\xa6\x1d\xb6\x9a\x1d\x4c\xa6\x10\xea\x68\x94\x96\x97\x55\x10\x36\x81\x9e\x75\xc3\x08\xaa\xdb\x73\x58\xc3\x65\xb1\x98\x87\x8a\x8e\x8d\xf5\xf5\x55\x76\xc1\x19\x61\xa7\x5c\x23\x6a\xa5\x3d\x68\xed\x40\xbe\x5e\xcf\x7d\xc2\x11\x3a\xc4\x14\x6b\x28\x13\x7a\xc9\x9d\xb1\x94\x6e\x4c\x7e\xf6\x81\xee\x33\x43\xb2\x02\xf2\x96\x6a\x79\xcd\x39\xbd\xe1\x8e\x0c\x8d\x45\x11\xeb\x2a\x53\x7a\x7c\xaa\xa1\xba\x79\x95\xc8\x65\xa7\x38\x09\x21\x79\xfa\x04\x9b\xe2\x37\x7e\xdf\xcc\x04\x61\x8c\x5f\xcd\xb1\x07\x5c\x2e\x45\x40\xa5\xb0\xa6\x86\x33\xdd\xda\xbd\x99\xfa\x79\x97\xbc\xcc\x09\x9f\xb5\xe6\x06\x5f\xa7\x92\xda\x9f\xab\xf8\xbc\xad\x38\x5c\xff\xdc\xe4\x0b\x3a\xd3\x9f\x92\x70\x9c\xb4\x9c\x3d\xa4\x09\xd7\xf8\x0c\x8c\xdd\x8e\x2f\x85\x3a\x67\x35\x89\x07\x2e\x1a\x77\xe2\xc2\xb9\xf4\x41\x49\x3f\xde\x36\x0a\x4f\xf5\x93\xf5\x8e\xae\xfa\xcd\xe7\x54\xde\xe8\x29\x52\x41\x52\x0a\x84\xf8\x3e\x23\x63\x2e\x67\x46\xec\x24\xbb\xd9\x2c\x04\xd3\x10\x90\x75\xe9\x82\x6f\x11\xee\xf0\x9d\x25\xef\xc3\xa4\x4b\xb7\xd1\x55\xe9\x3f\x7b\x61\xf8\x61\x97\x9a\x18\x35\x24\x66\x2f\x58\x9a\x51\x2b\x18\xdd\x88\xf1\xe1\x29\x99\x72\x8d\x37\x96\x6d\x6e\xf6\xe8\x0f\xeb\xf7\x9b\xf5\x85\xe3\x28\xad\x49\xf6\x86\xf4\xfd\xb4\x0b\xb5\x13\x99\xa7\xee\x2f\x98\x5f\x07\xe9\x6e\x88\xc0\xad\x38\x48\x7f\x65\xe2\xda\xc9\xc9\x2e\x7b\xa8\x49\xda\xc0\x96\xaf\x3f\xc6\x8e\x07\xc0\x51\x0e\x06\xee\x88\x10\x1a\x9c\xfd\x97\xb0\x67\x31\x01\x95\xd3\x1c\xe7\x32\x2e\x6d\xf2\xac\x3a\x7c\x49\xd2\xf0\xaf\x0d\x63\xcf\xd6\x2f\xc3\x60\xb2\xae\x5f\x3f\xa2\x1f\x39\xd9\x15\x52\x1f\xa9\xd5\xbd\x38\x61\xa4\xe2\x5b\xa3\x1b\x8b\x62\x24\xee\x28\xf4\x70\x20\x5c\xed\x61\xd3\x53\x9b\x69\xac\x01\x13\x65\x87\xdd\x89\x88\x2c\xbd\xf9\x5d\xea\xca\xbf\x69\x95\xbf\x5d\x3e\x3b\x24\xfb\x68\x99\xa4\x4c\xa2\x9c\xe1\x78\x93\x7f\xd9\x8a\xa3\x4a\x95\x39\x15\xe3\xd6\xe9\xaf\xc9\xb1\x09\x92\x0b\x69\xb2\x6b\x42\xcf\xdc\xec\x28\x51\x18\xe6\x39\x56\xb6\xe9\x81\x2f\x0f\x11\x4d\xfe\xf3\x3a\x91\x5c\xff\x29\xb2\xb9\xbd\xc0\x2b\xf9\xb1\x89\x2b\x97\x8e\xc0\x4b\x19\x31\x72\xa7\x43\xe0\x79\x2a\x11\x63\xb5\x50\xa7\x20\x0e\x8e\xba\x23\x68\x14\x78\xc0\xe5\x54\x03\x81\xd4\x4e\xf1\x97\xc3\xd9\xc7\x7e\x5c\x7e\xad\x33\xf7\x72\x47\xfe\xcb\x61\x48\x78\x75\x45\xea\xc0\x12\x63\x66\x60\x0d\xab\xf5\x8a\xa7\x78\x14\x08\x2e\x48\xfc\x37\x2d\x0e\x44\x8b\xf0\xae\x79\x7d\x8a\x9c\x16\x68\x85\x5d\xf4\x09\x52\xa5\xe1\xbe\x96\x59\x28\xe2\x47\xb7\x91\xed\xac\x5e\x72\xe7\x2b\xaa\xa4\xed\xce\xd1\x7d\x26\xc4\x59\x74\x30\x58\x3e\xbe\x98\xbd\x5a\x14\x56\xe5\xed\x35\x19\x7c\xe9\x2a\x6b\x83\x04\x1d\x8f\x6f\xed\x0b\xeb\x8e\xc4\x78\x17\xd2\x90\x49\xe4\xa9\x91\xcd\x23\x06\x9d\x2d\x19\xf4\xe0\xbf\x18\xf1\xb8\x89\xcc\x70\xbf\x87\xe7\x69\xa3\x08\x33\x55\xe5\xed\xdf\x1f\xcd\x9b\x50\xa2\x93\xa5\x4f\x9b\x84\x2c\x34\x18\x5c\xfc\xca\xeb\x9b\xfd\x6f\x0e\x4d\xd8\x9d\x7a\x34\x87\x76\x68\x6a\xf6\xd1\xdf\x0f\xf1\x41\x9d\x33\x86\xfa\x16\xc6\xe7\x95\xd2\xb1\xce\x41\xa2\x0d\xa1\x4d\xc8\x46\x81\xe7\xdb\x06\x56\x55\x63\x62\x7d\xa5\x84\x5d\x0b\x5c\x0e\x11\x96\xaf\x1e\x24\x3b\x40\xad\x2b\x7a\x27\xee\x96\xe0\x7a\x54\xd1\x4c\xa6\x95\xbe\xa3\xd3\xe5\x77\x81\x01\x4d\x75\x3c\x3b\xac\x05\xfc\x99\x4a\xb0\x4f\xe6\xe8\x8a\xd8\xb2\x3d\xe1\xf3\x85\x82\x7e\x25\xab\x6e\x69\x1f\x94\xc7\xa5\x51\x5c\xf8\xb9\xcd\x34\x4a\x5f\x14\x64\x6d\x32\xd9\x4a\x6d\xef\x17\x0f\x95\x79\x12\xd0\x8a\x52\xa7\xa2\xae\xcb\x99\xe8\x19\x71\x37\x65\x7c\x65\xa6\xe5\x06\xbd\x78\xc3\x56\x9c\xdf\x97\x09\x55\xc9\xe9\x6e\xc5\xee\x6d\xa4\x82\x4b\xb3\xd0\x75\x23\x8b\xee\x76\x9e\x9f\xaf\xf0\x5b\x23\xc2\x37\x44\xbb\x28\x22\x62\xde\xdc\x67\xe9\x9c\x9f\x27\xfb\xe1\xb0\x2a\xab\xa3\x26\x64\x8c\x44\xec\x76\x8e\x6f\x2e\xb7\x22\xbd\x4e\x10\x25\x4b\xeb\x96\x26\x35\x11\x2d\x8c\xc4\x61\x19\xea\x44\x13\x3c\x53\xf1\xe5\xba\x4d\xe0\xf9\x7e\xe1\x79\xe9\x74\x38\x69\xf2\x16\xd6\x8d\x9c\xd4\x51\xac\x09\x2c\x62\x49\x37\x7d\xa6\x27\x1f\x32\xb6\xd4\x77\xc1\x1f\x5f\x78\xfb\xeb\xbb\xdc\x71\xf1\x8d\xa5\xbb\x36\x56\x58\xd1\x55\x62\xaf\xbf\x44\x8e\xeb\xef\xf3\x6e\x48\x94\xaa\xac\xf6\x4c\xc9\x8e\x1b\x60\x73\xe7\x1f\x15\x60\x87\x24\xef\xb2\x25\xe6\x6a\x5b\x2e\x78\x3f\x92\xef\xff\xc8\x20\xe6\xdf\x09\xdd\xf6\xfe\x69\x27\x17\xab\xf4\xa7\x62\x91\x46\xda\xd8\x3c\x0a\x27\x10\x22\xfd\x69\x29\x29\x2c\x13\x37\x91\xd0\xb6\x74\x2b\x93\xb7\xe8\xba\xfe\xe4\x7b\x7b\x8b\xd1\x7c\x24\x07\xe4\x75\x5d\x1b\x44\x38\x4e\xc7\xe2\x5f\xbd\x2c\x93\x28\xe7\xba\x2c\xe7\xab\x43\x74\x60\x7e\x97\x80\xb3\x28\x5c\x9b\x5f\x91\x47\x55\xaa\xaf\x52\x51\xb2\x93\x4f\x8c\x3d\x86\x9d\x9a\x05\x27\x8a\xbb\xce\xd4\x73\x28\xd9\xbf\x5d\xc9\x7e\xfd\x70\xd0\x61\x6b\x39\xb5\x66\xbf\x7a\x24\x02\x42\xa1\x55\x56\x7b\x24\xb6\xc2\x9f\x99\x25\xbd\xbf\x2a\x74\xfa\x69\x8a\xa6\x8f\x7c\xb1\x23\xef\x8b\xfc\x6c\x90\x62\x64\x13\x9f\x0f\x92\x70\x60\x23\x31\xdd\x86\xfe\x98\x2e\x95\xa4\x1f\xf6\xb8\xdd\x69\xff\x98\x2e\x05\x5e\x56\x18\xf9\xaf\xc4\xee\x01\x96\x4a\x62\xae\x4e\x3c\x7c\x5a\x7d\x71\xd7\x61\x56\x87\xaf\xf0\x85\x2f\xdd\x90\x7d\x06\xb1\x4f\x4e\x67\xd2\xb9\xc8\xc5\xac\x78\x38\xde\xb7\x9e\x3d\x85\x71\x3b\xb1\xaf\xc3\xa4\x02\xd6\xe3\xdc\x22\x77\x8c\x08\xaa\xbc\xe4\x95\x76\x37\xa0\x0b\x3d\x6e\x23\x53\x30\xa3\xb9\x43\x6c\x2e\x36\x57\x58\xd3\xb9\xf0\x7a\x62\x23\xaa\x85\xe1\xf9\x93\x33\x6f\xd2\x19\x87\xc1\x68\x22\xda\x5b\x18\x9e\x80\xce\xc9\xb0\xf5\x8d\x49\x67\x5c\xc5\xc3\xe6\xaa\xaf\x23\xd3\xec\xd2\xdd\xca\x43\x41\xb4\xa7\xd7\x5c\x2e\x27\x7e\x97\x21\x91\x70\xa8\x6a\x19\x37\x3a\x56\x64\xcb\xd3\xd3\x5a\x22\x41\xa9\x56\xdf\x97\xac\x8d\x26\xe8\x40\xfd\xd9\x10\xae\xcf\xcc\x00\xab\x27\xa5\x40\xab\xdf\x7e\xfa\x5a\x72\x46\x10\xcd\xfc\xe0\x3f\xc2\xd0\x26\x4e\x7a\xb7\x45\x97\xa3\x6a\xd9\x70\xb6\x3a\xe3\xb5\xe7\xa8\xc9\xac\x32\x5b\x77\x03\x1b\x26\x29\x45\xa5\xd9\x35\x08\x3c\x16\x11\xe4\x8c\x8b\xc1\xf4\xd0\xa0\xb2\x65\x8f\x75\xeb\x2b\x72\x13\x30\x7b\xf8\x2f\x98\xdb\xef\x76\xf6\x35\xff\x80\x34\xd1\x11\x3a\x57\xf2\x5a\x0f\x0e\xcf\x2a\xfa\xfa\x97\xc7\xb1\x9a\x7d\xde\x3c\xe2\xed\x80\x62\xb5\x15\x31\xc4\x9e\xb0\xb4\x4b\xb7\x4c\x1e\x58\xe2\x26\x1e\xde\x26\x73\x51\x86\xd3\x4f\x35\xee\x80\x60\x0d\x2b\x0c\x78\xfc\x44\xc1\xfb\x71\x2f\x5a\xf4\x55\x25\x77\x2e\x5a\x33\xc7\xa6\x73\x7f\x9b\x88\xb3\x5f\x64\xc1\x51\xf0\x3e\x93\xb9\xe4\x85\xdb\x5b\x2a\x8e\xc8\xa6\x05\xb8\x9e\x94\x90\x7b\x87\x4c\x3e\x14\x48\x08\x7a\x5b\xda\xd3\xb1\xc2\x21\x87\x8c\x50\xf5\xc3\xc3\x2f\x43\x46\x7b\xb2\xc6\x7f\x79\xb1\x2c\x51\x76\x99\xd2\xfd\x49\x28\x06\xee\xcf\x8d\xf0\x4f\x23\x19\x8f\xee\x45\x6e\x27\x70\xdb\x07\x3e\xb9\x1a\x95\x97\x0d\x66\x67\xda\xeb\xce\xab\x73\xae\x5c\x9f\x2c\x78\xa5\xbf\x71\x61\x97\x71\x0e\x7d\xe1\xe8\xf1\x81\xb2\x73\xe2\x3b\xc4\x8e\x7b\xb3\xb7\xcb\xe5\x84\xf5\x04\x5a\x18\xfc\x08\x17\xbf\x32\x4b\x9f\x9f\x78\xcb\xc0\x56\x57\x8e\x90\x70\xca\x7d\xb2\xbd\x23\xe2\xb7\x83\xc9\x3b\x57\x91\x3a\x23\x76\xe6\xcd\x79\xdb\x82\x68\xcf\x27\x29\x21\x3a\x90\xd2\x25\xe0\x60\x30\xf6\x83\x91\x75\x91\x7c\xa4\x9d\x58\x29\xc2\x5a\x3c\xf9\x89\x78\x70\xba\xf5\x9c\x1a\xe3\x47\xa8\x81\x56\xa4\x97\xcd\xcf\x7b\x99\x4c\xc3\x11\xad\x50\xb6\xdd\xf7\x01\xf6\x75\x5a\x7d\xef\x4e\x71\x9d\x14\x46\x43\xea\x3f\x83\x87\x95\x9f\x4b\xa7\xc2\x60\xef\x67\x01\x1c\xb2\x59\x1b\xcb\x89\xe2\x23\xe9\x8f\x1f\x16\x31\x3c\x81\xa5\x41\x06\x6e\x3d\x82\x44\x10\x5c\xc2\xbd\x52\xff\xb9\xd1\x74\xa6\x47\x60\x7b\x68\x90\x59\x2b\xfe\xdf\x76\x28\xba\x82\x2b\xd7\x2f\x54\x43\x8d\xeb\xac\x92\x1e\x99\x1a\xb2\xa8\xb0\xe0\xe1\x9d\x19\x71\xf6\x11\x63\x75\xc5\x02\x07\x15\x08\x25\x1e\x3e\x7d\xfc\x86\x01\xfb\xd2\x82\xc1\xcb\x3b\xed\x6a\xa5\x73\xae\x5c\x0b\x15\x69\xc3\x3e\x32\xfb\x65\x55\x4b\x33\xab\xe5\xe0\x6c\xb8\x60\x3e\x77\x83\xb9\x11\xd4\x5b\xa5\xa8\xbe\xd5\x89\x57\x98\x96\xf2\xf5\xcc\x1d\xdf\xb0\xef\xa9\x26\x2b\x3b\xf2\x32\x19\xc2\x0a\xe3\x6b\x97\xec\xf1\xe4\x9b\x3d\x2f\x30\x61\xc1\xff\xfc\xbe\xf9\x9f\x96\x0b\x66\xad\x88\x95\x0a\x08\x15\xf7\x15\x00\x00\x40\xd0\xde\xfd\x01\xec\xaf\xbf\x3d\xf6\xff\x01\x00\x00\xff\xff\x3a\x39\x67\xb7\x5e\x0d\x00\x00")

func _8x8mapPngBytes() ([]byte, error) {
	return bindataRead(
		__8x8mapPng,
		"8x8map.png",
	)
}

func _8x8mapPng() (*asset, error) {
	bytes, err := _8x8mapPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "8x8map.png", size: 3422, mode: os.FileMode(420), modTime: time.Unix(1597046261, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"8x8map.png": _8x8mapPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"8x8map.png": &bintree{_8x8mapPng, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

